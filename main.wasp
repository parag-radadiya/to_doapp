app toDoapp {
  wasp: {
    version: "^0.11.1"
  },
  title: "toDoapp",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  tasks    Task[]
psl=}

entity Task {=psl
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
psl=}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

action editTask {
  fn: import { editTask } from "@server/actions.js",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@server/actions.js",
  entities: [Task]
}

action markTaskAsDone {
  fn: import { markTaskAsDone } from "@server/actions.js",
  entities: [Task]
}

query getTasks {
  fn: import { getTasks } from "@server/queries.js",
  entities: [Task]
}

query getTask {
  fn: import { getTask } from "@server/queries.js",
  entities: [Task]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route TaskRoute { path: "/task/:taskId", to: TaskPage }
page TaskPage {
  component: import { Task } from "@client/pages/Task.jsx",
  authRequired: true
}